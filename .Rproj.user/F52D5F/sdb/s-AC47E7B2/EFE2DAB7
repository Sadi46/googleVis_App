{
    "collab_server" : "",
    "contents" : "\n##### server.R ##########\n\n# prepare list for reactive values (class = function)\n# for re-usable 'template code'\ninclude <- reactiveValues(data = NULL)\n# also for controlling progress\ninclude$setupComplete <- FALSE ##??TODO\n\n\n# put data in list of reactive values, 'include'\nobserveEvent(input$data1, {\n  include$data <- mtcars\n  # clear subdata in case of change of dataset\n  include$subdata <- NULL\n  # make sure names are properly formatted\n  names(include$data)<-make.names(names(include$data)) \n})\n\nobserveEvent(input$data2, {\n  include$data <- ozone\n  # clear subdata in case of change of dataset\n  include$subdata <- NULL\n  # make sure names are properly formatted\n  names(include$data)<-make.names(names(include$data)) \n})\nobserveEvent(input$data3, {\n  include$data <- steps\n  # clear subdata in case of change of dataset\n  include$subdata <- NULL\n  # make sure names are properly formatted\n  names(include$data)<-make.names(names(include$data)) \n})\nobserveEvent(input$data4, {\n  include$data <- US_severe_weather_events\n  # clear subdata in case of change of dataset\n  include$subdata <- NULL\n  # make sure names are properly formatted\n  names(include$data)<-make.names(names(include$data)) \n})\n\n##### peak: show structure for dataset, subset and url-data ####################\n\n\n# observeEvent(input$peakUrl,{\n#   include$data <- NULL\n# })\n# show with progress bar \noutput$lines1 <- renderPrint({\n  withProgress(message = 'Reading data', value=1,{\n    incProgress(1/10,detail = \"Please wait\")\n    Sys.sleep(0.1)\n    if (!is.null(include$data))\n      return (include$data %>% peak())\n    if (!is.null(include$subdata))\n      return (include$subdata %>% peak())\n    else{\n      validate(need(input$path2, 'Get a dataset or copy and paste a url first'))\n      # delay action\n      req(input$peakUrl)\n      Url <- input$path2\n      include$peak<- peak(Url)\n      include$peak\n    }\n  })\n})\nobserveEvent(input$peakUrl,{\n  # clear the (old) data \n  include$data <- NULL\n})\n\n############## download; choose file and update path\nobserveEvent(input$browse1,{\n  # function to escape the file\n  # thanks to Henrik Bengtsson; \n  # https://stat.ethz.ch/pipermail/r-help/2007-June/133564.html\n  file.choose2 <- function(...) {\n    pathname <- NULL\n    tryCatch({pathname <- file.choose()},\n             error = function(ex) { })\n    pathname\n  }\n  updateTextInput(session, \"path1\",  value = file.choose2())\n})\n# put data in list of reactive values, 'include'\nobserveEvent(input$import1, {\n  head<-input$header1 # TRUE or FALSE\n  dataset<- import(input$path1, header=head)\n  include$data <- dataset\n  # clear subdata in case of change of dataset\n  include$subdata <- NULL\n  # make sure names are properly formatted\n  names(include$data)<-make.names(names(include$data)) \n})\n\n\n\n#### make datasets from a url reactive ##################################\n\n# although import() can be very slow, \n# it is the simplest way and works for almost \"all\" extensions\n# else:\n# https://www.datacamp.com/community/tutorials/importing-data-r-part-two#gs.4Ci45kg\n# example url\n# source: https://datahub.io/dataset/open-pubs\n# data: https://datahub.io/dataset/82954561-ba95-4984-82de-1121c1217c9b/resource/6a7281b9-1aaf-488b-bd9f-4e6a9a604745/download/openpubs.csv\n\n\n# fill selectInput for column selection / duplicates not possible with selectize\nobserve({\n  req(include$peak)\n  # get classes for every column in the dataset    \n  # prevent duplicates by pasting V1,V2 etc to classes\n  # peak output (factor) for Url's: Datastructure[1]= accessDate, [2]= filesize,\n  # [3]= filetype, [4]= miss, [5]= columns, [6:end]= classes \n  \n  cols<- as.character(include$peak$Datastructure[5])\n  vars<- paste0(\"V\", 1:cols)\n  classes<- c(as.character(include$peak$Datastructure[6:nrow(include$peak)]))\n  none<- c(paste0(\"N\",1:length(classes),\"=\",\"NULL\"))\n  variables<- paste(vars, classes, sep=\"=\")\n  # add security in case there is no header()\n  updateSelectInput(session, \"select\",\n                    label = \"Select columns\",\n                    # list of ordered classes in the data + NULL options\n                    choices = c(variables, none))\n  # as class names start at fourth position (\"V1=character\", \"N2=NULL\"),\n  # they are easy to extract: substr(string1, start=4, stop=nchar(string1))\n})\n\n\n# read some data from url\nobserveEvent(input$import2, {\n  # prevent error if button is clicked without url\n  req(input$path2) \n  # or: validate(need(input$path2, 'Copy and Paste a url first')) \n  withProgress(message = 'Reading data', value=1,{\n    incProgress(1/10, detail = \"Please wait\")\n    Sys.sleep(0.1)\n    N<-input$row2\n    Url <- input$path2\n    head<-input$header2\n    # extract classes from input$select\n    colclasses <- substr(input$select, start=4, stop=nchar(input$select))\n    data<-import(Url, header=head, nrows=N, colClasses= colclasses)\n    include$data<-data\n    # clear subdata in case of change of dataset\n    include$subdata <- NULL\n    # make sure names are properly formatted\n    names(include$data)<-make.names(names(include$data))\n  })\n})\n# read all data from url \nobserveEvent(input$import3, {\n  # prevent error if button is clicked without url\n  req(input$path2) \n  # show progress\n  withProgress(message = 'Reading data', value=1,{\n    incProgress(1/10, detail = \"Please wait\")\n    Sys.sleep(0.1)\n    Url <- input$path2\n    head<-input$header2\n    # extract classes from input$select\n    colclasses <- substr(input$select, start=4, stop=nchar(input$select))\n    newdata<-import(Url, header=head, colClasses = colclasses)\n    include$data<-data\n    # clear subdata in case of change of dataset\n    include$subdata <- NULL\n    # make sure names are properly formatted\n    names(include$data)<-make.names(names(include$data))\n    # write to file to re-use through browse without downloading again\n    write.csv(newdata, file = \"download.csv\", row.names = FALSE)\n  })\n})\n\n \n  \n",
    "created" : 1496305958433.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3948181206",
    "id" : "EFE2DAB7",
    "lastKnownWriteTime" : 1496307229,
    "last_content_update" : 1496307229614,
    "path" : "D:/user/Documents/googleVis_App/load_and_read.R",
    "project_path" : "load_and_read.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}